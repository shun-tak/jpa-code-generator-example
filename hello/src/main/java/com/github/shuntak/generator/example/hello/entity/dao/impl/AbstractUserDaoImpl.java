package com.github.shuntak.generator.example.hello.entity.dao.impl;

import com.github.shuntak.generator.example.hello.entity.AbstractUser;
import com.github.shuntak.generator.example.hello.entity.dao.AbstractUserDao;
import com.github.shuntak.generator.example.hello.entity.ext.User;
import com.github.shuntak.generator.example.hello.entity.ext.User_;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import java.time.ZonedDateTime;
import java.util.List;
import java.util.Optional;

/**
 * User DAO base class.
 * Auto generated by JPA code generator.
 */
@javax.annotation.Generated(value = "JPACodeGenerator")
public abstract class AbstractUserDaoImpl extends AbstractDaoImpl<User> implements AbstractUserDao {
    @PersistenceContext(unitName = "example")
    private EntityManager entityManager;

    protected AbstractUserDaoImpl() {
        super(User.class);
    }

    protected AbstractUserDaoImpl(EntityManager entityManager) {
        super(User.class, entityManager);
        this.entityManager = entityManager;
    }

    @Override
    protected EntityManager getEntityManager() {
        return this.entityManager;
    }

    @Override
    public User create(User user) {
        getEntityManager().persist(user);
        return user;
    }

    @Override
    public User create(String name) {
        User user = User
                .builder()
                .name(name)
                .build();
        return create(user);
    }

    @Override
    public List<User> findAll() {
        CriteriaQuery<User> query = criteriaQuery();
        Root<User> root = query.from(getEntityClass());
        query.select(root);
        return list(query);
    }

    @Override
    public Optional<User> find(Long pk) {
        return Optional.ofNullable(getEntityManager().find(getEntityClass(), pk));
    }
}
