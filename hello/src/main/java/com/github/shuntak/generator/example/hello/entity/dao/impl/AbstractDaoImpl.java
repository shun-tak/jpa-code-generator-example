package com.github.shuntak.generator.example.hello.entity.dao.impl;

import com.github.shuntak.generator.example.hello.entity.dao.AbstractDao;

import javax.annotation.Generated;
import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaDelete;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.CriteriaUpdate;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * Abstract DAO class.
 * Auto generated by JPA code generator.
 */
@Generated(value = "JPACodeGenerator")
public abstract class AbstractDaoImpl<E> implements AbstractDao<E> {
    private final Class<?> entityClass;

    private EntityManager entityManager;

    protected AbstractDaoImpl(Class<?> entityClass) {
        this.entityClass = entityClass;
    }

    protected AbstractDaoImpl(Class<?> entityClass, EntityManager entityManager) {
        this.entityClass = entityClass;
        this.entityManager = entityManager;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Class<E> getEntityClass() {
        return (Class<E>) entityClass;
    }

    @Override
    public E persist(E entity) {
        getEntityManager().persist(entity);
        getEntityManager().flush();
        return entity;
    }

    @Override
    public E merge(E entity) {
        E managedEntity = getEntityManager().merge(entity);
        getEntityManager().flush();
        return managedEntity;
    }

    @Override
    public E remove(E entity) {
        getEntityManager().remove(entity);
        getEntityManager().flush();
        return entity;
    }

    @Override
    public Optional<E> find(Object pk) {
        return Optional.ofNullable(getEntityManager().find(getEntityClass(), pk));
    }

    protected CriteriaBuilder criteriaBuilder() {
        return getEntityManager().getCriteriaBuilder();
    }

    protected CriteriaQuery<E> criteriaQuery() {
        return criteriaBuilder().createQuery(getEntityClass());
    }

    protected CriteriaUpdate<E> criteriaUpdate() {
        return criteriaBuilder().createCriteriaUpdate(getEntityClass());
    }

    protected CriteriaDelete<E> criteriaDelete() {
        return criteriaBuilder().createCriteriaDelete(getEntityClass());
    }

    protected E uniqueResult(CriteriaQuery<E> criteriaQuery) {
        return getEntityManager().createQuery(Objects.requireNonNull(criteriaQuery)).getSingleResult();
    }

    protected List<E> list(CriteriaQuery<E> criteriaQuery) {
        return getEntityManager().createQuery(Objects.requireNonNull(criteriaQuery)).getResultList();
    }
}
