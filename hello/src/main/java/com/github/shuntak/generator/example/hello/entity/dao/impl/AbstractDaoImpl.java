package com.github.shuntak.generator.example.hello.entity.dao.impl;

import com.github.shuntak.generator.example.hello.entity.dao.AbstractDao;
import org.hibernate.HibernateException;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaDelete;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.CriteriaUpdate;
import java.util.List;
import java.util.Objects;

/**
 * Abstract DAO class.
 * Auto generated by JPA code generator.
 */
@javax.annotation.Generated(value = "JPACodeGenerator")
public abstract class AbstractDaoImpl<E> implements AbstractDao<E> {
    private final EntityManager entityManager;
    private final Class<?> entityClass;

    protected AbstractDaoImpl(EntityManager entityManager, Class<?> entityClass) {
        this.entityManager = entityManager;
        this.entityClass = entityClass;
    }

    protected EntityManager getEntityManager() {
        return this.entityManager;
    }

    @SuppressWarnings("unchecked")
    public Class<E> getEntityClass() {
        return (Class<E>) entityClass;
    }

    public CriteriaBuilder criteriaBuilder() {
        return getEntityManager().getCriteriaBuilder();
    }

    public CriteriaQuery<E> criteriaQuery() {
        return criteriaBuilder().createQuery(getEntityClass());
    }

    public CriteriaUpdate<E> criteriaUpdate() {
        return criteriaBuilder().createCriteriaUpdate(getEntityClass());
    }

    public CriteriaDelete<E> criteriaDelete() {
        return criteriaBuilder().createCriteriaDelete(getEntityClass());
    }

    public E uniqueResult(CriteriaQuery<E> criteriaQuery) throws HibernateException {
        return getEntityManager().createQuery(Objects.requireNonNull(criteriaQuery)).getSingleResult();
    }

    public List<E> list(CriteriaQuery<E> criteriaQuery) throws HibernateException {
        return getEntityManager().createQuery(Objects.requireNonNull(criteriaQuery)).getResultList();
    }
}
